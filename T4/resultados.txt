Sistema operativo utilizado:
Description:	Debian GNU/Linux 12 (bookworm)
Versión del núcleo de linux:
Linux AsusBustamante 5.15.167.4-microsoft-standard-WSL2 #1 SMP Tue Nov 5 00:21:55 UTC 2024 x86_64 GNU/Linux
==== run-san ====
gcc -g -DSAN=1 -fsanitize=address -fsanitize=undefined -Wall -Werror -pedantic -DNTHREADS -std=c18 -InKernel  test-pedir.c pedir.c nKernel/nthread.c nKernel/nutil.c nKernel/ntime.c nKernel/pss.c nKernel/sched-fcfs.c nKernel/sched-rr.c nKernel/sched-pri-1core.c nKernel/sched-fcfs-1core.c nKernel/sem.c nKernel/mutex-cond.c nKernel/nmsgs.c nKernel/nsystem.c -lm -lpthread -lrt -o pedir.bin-san
--------------------------------------------
./pedir.bin-san
Info: setting single-core FCFS scheduling
El ejemplo del enunciado
------------------------

Tpo=0: T1 (thread 1) invoca nPedir(0)
Tpo=0: T1 cat 0 obtiene recurso
Tpo=1:                     T3 (thread 2) invoca nPedir(0)
Tpo=2:           T2 (thread 3) invoca nPedir(1)
Tpo=3:                                         T5 (thread 4) invoca nPedir(0)
Tpo=3: Esperando que T1 termine
Tpo=4: T1 devuelve recurso
Tpo=4:           T2 cat 1 obtiene recurso
Tpo=4: T1 termino
Tpo=5:                               T4 (thread 5) invoca nPedir(1)
Tpo=6:           T2 devuelve recurso
Tpo=6:                     T3 cat 0 obtiene recurso
Tpo=6:           Esperando que T2 termine
Tpo=6:           T2 termino
Tpo=6:                     Esperando que T3 termine
Tpo=7:                     T3 devuelve recurso
Tpo=7:                               T4 cat 1 obtiene recurso
Tpo=7:                     T3 termino
Tpo=7:                               Esperando que T4 termine
Tpo=8:                               T4 devuelve recurso
Tpo=8:                                         T5 cat 0 obtiene recurso
Tpo=8:                               T4 termino
Tpo=8:                                         Esperando que T5 termine
Tpo=9:                                         T5 devuelve recurso
Tpo=9:                                         T5 termino

Test de robustez
----------------


Toma un poco mas de 10 segundos
t1 t2 t3 ... significa que ese thread comenzo a trabajar

t6 t7 t8 t9 t10 t11 t12 t13 
Numero de entradas/salidas = 6802378
En mi computador make run reporto unas 10 mil entradas/salidas con 3 threads

Felicitaciones: funciona
Info: Number of cores = 1
Info: total context changes = 40
Info: Implicit context changes = 0
--------------------------------------------
./pedir.bin-san -slice 1
Info: setting 1-core round robin scheduling
El ejemplo del enunciado
------------------------

Tpo=0: T1 (thread 1) invoca nPedir(0)
Tpo=0: T1 cat 0 obtiene recurso
Tpo=1:                     T3 (thread 2) invoca nPedir(0)
Tpo=2:           T2 (thread 3) invoca nPedir(1)
Tpo=3:                                         T5 (thread 4) invoca nPedir(0)
Tpo=3: Esperando que T1 termine
Tpo=4: T1 devuelve recurso
Tpo=4: T1 termino
Tpo=4:           T2 cat 1 obtiene recurso
Tpo=5:                               T4 (thread 5) invoca nPedir(1)
Tpo=6:           T2 devuelve recurso
Tpo=6:                     T3 cat 0 obtiene recurso
Tpo=6:           Esperando que T2 termine
Tpo=6:           T2 termino
Tpo=6:                     Esperando que T3 termine
Tpo=7:                     T3 devuelve recurso
Tpo=7:                     T3 termino
Tpo=7:                               Esperando que T4 termine
Tpo=7:                               T4 cat 1 obtiene recurso
Tpo=8:                               T4 devuelve recurso
Tpo=8:                               T4 termino
Tpo=8:                                         Esperando que T5 termine
Tpo=8:                                         T5 cat 0 obtiene recurso
Tpo=9:                                         T5 devuelve recurso
Tpo=9:                                         T5 termino

Test de robustez
----------------


Toma un poco mas de 10 segundos
t1 t2 t3 ... significa que ese thread comenzo a trabajar

t6 t7 t8 t9 t10 t11 t12 t13 
Numero de entradas/salidas = 2469758
En mi computador make run reporto unas 10 mil entradas/salidas con 3 threads

Felicitaciones: funciona
Info: Number of cores = 1
Info: total context changes = 2446198
Info: Implicit context changes = 6
==== run-g ====
gcc -g -Wall -Werror -pedantic -DNTHREADS -std=c18 -InKernel  test-pedir.c pedir.c nKernel/nthread.c nKernel/nutil.c nKernel/ntime.c nKernel/pss.c nKernel/sched-fcfs.c nKernel/sched-rr.c nKernel/sched-pri-1core.c nKernel/sched-fcfs-1core.c nKernel/sem.c nKernel/mutex-cond.c nKernel/nmsgs.c nKernel/nsystem.c -lm -lpthread -lrt -o pedir.bin-g
--------------------------------------------
./pedir.bin-g  
Info: setting single-core FCFS scheduling
El ejemplo del enunciado
------------------------

Tpo=0: T1 (thread 1) invoca nPedir(0)
Tpo=0: T1 cat 0 obtiene recurso
Tpo=1:                     T3 (thread 2) invoca nPedir(0)
Tpo=2:           T2 (thread 3) invoca nPedir(1)
Tpo=3:                                         T5 (thread 4) invoca nPedir(0)
Tpo=3: Esperando que T1 termine
Tpo=4: T1 devuelve recurso
Tpo=4:           T2 cat 1 obtiene recurso
Tpo=4: T1 termino
Tpo=5:                               T4 (thread 5) invoca nPedir(1)
Tpo=6:           T2 devuelve recurso
Tpo=6:                     T3 cat 0 obtiene recurso
Tpo=6:           Esperando que T2 termine
Tpo=6:           T2 termino
Tpo=6:                     Esperando que T3 termine
Tpo=7:                     T3 devuelve recurso
Tpo=7:                               T4 cat 1 obtiene recurso
Tpo=7:                     T3 termino
Tpo=7:                               Esperando que T4 termine
Tpo=8:                               T4 devuelve recurso
Tpo=8:                                         T5 cat 0 obtiene recurso
Tpo=8:                               T4 termino
Tpo=8:                                         Esperando que T5 termine
Tpo=9:                                         T5 devuelve recurso
Tpo=9:                                         T5 termino

Test de robustez
----------------


Toma un poco mas de 10 segundos
t1 t2 t3 ... significa que ese thread comenzo a trabajar

t6 t7 t8 t9 t10 t11 t12 t13 
Numero de entradas/salidas = 7766608
En mi computador make run reporto unas 10 mil entradas/salidas con 3 threads

Felicitaciones: funciona
Info: Number of cores = 1
Info: total context changes = 40
Info: Implicit context changes = 0
--------------------------------------------
./pedir.bin-g -slice 1 -ncores 4
Info: setting 4-core round robin scheduling
El ejemplo del enunciado
------------------------

Tpo=0: T1 (thread 1) invoca nPedir(0)
Tpo=0: T1 cat 0 obtiene recurso
Tpo=1:                     T3 (thread 2) invoca nPedir(0)
Tpo=2:           T2 (thread 3) invoca nPedir(1)
Tpo=3:                                         T5 (thread 4) invoca nPedir(0)
Tpo=3: Esperando que T1 termine
Tpo=4: T1 devuelve recurso
Tpo=4: T1 termino
Tpo=4:           T2 cat 1 obtiene recurso
Tpo=5:                               T4 (thread 5) invoca nPedir(1)
Tpo=6:           T2 devuelve recurso
Tpo=6:                     T3 cat 0 obtiene recurso
Tpo=6:           Esperando que T2 termine
Tpo=6:           T2 termino
Tpo=6:                     Esperando que T3 termine
Tpo=7:                     T3 devuelve recurso
Tpo=7:                               T4 cat 1 obtiene recurso
Tpo=7:                     T3 termino
Tpo=7:                               Esperando que T4 termine
Tpo=8:                               T4 devuelve recurso
Tpo=8:                                         T5 cat 0 obtiene recurso
Tpo=8:                               T4 termino
Tpo=8:                                         Esperando que T5 termine
Tpo=9:                                         T5 devuelve recurso
Tpo=9:                                         T5 termino

Test de robustez
----------------


Toma un poco mas de 10 segundos
t1 t2 t3 ... significa que ese thread comenzo a trabajar

t6 t7 t8 t9 t10 t11 t13 t12 
Numero de entradas/salidas = 964268
En mi computador make run reporto unas 10 mil entradas/salidas con 3 threads

Felicitaciones: funciona
Info: Number of cores = 4
Info: total context changes = 688839
Info: Implicit context changes = 2
==== run ====
gcc -g -O -DOPT=1 -Wall -Werror -pedantic -DNTHREADS -std=c18 -InKernel  test-pedir.c pedir.c nKernel/nthread.c nKernel/nutil.c nKernel/ntime.c nKernel/pss.c nKernel/sched-fcfs.c nKernel/sched-rr.c nKernel/sched-pri-1core.c nKernel/sched-fcfs-1core.c nKernel/sem.c nKernel/mutex-cond.c nKernel/nmsgs.c nKernel/nsystem.c -lm -lpthread -lrt -o pedir.bin
--------------------------------------------
./pedir.bin
Info: setting single-core FCFS scheduling
El ejemplo del enunciado
------------------------

Tpo=0: T1 (thread 1) invoca nPedir(0)
Tpo=0: T1 cat 0 obtiene recurso
Tpo=1:                     T3 (thread 2) invoca nPedir(0)
Tpo=2:           T2 (thread 3) invoca nPedir(1)
Tpo=3:                                         T5 (thread 4) invoca nPedir(0)
Tpo=3: Esperando que T1 termine
Tpo=4: T1 devuelve recurso
Tpo=4:           T2 cat 1 obtiene recurso
Tpo=4: T1 termino
Tpo=5:                               T4 (thread 5) invoca nPedir(1)
Tpo=6:           T2 devuelve recurso
Tpo=6:                     T3 cat 0 obtiene recurso
Tpo=6:           Esperando que T2 termine
Tpo=6:           T2 termino
Tpo=6:                     Esperando que T3 termine
Tpo=7:                     T3 devuelve recurso
Tpo=7:                               T4 cat 1 obtiene recurso
Tpo=7:                     T3 termino
Tpo=7:                               Esperando que T4 termine
Tpo=8:                               T4 devuelve recurso
Tpo=8:                                         T5 cat 0 obtiene recurso
Tpo=8:                               T4 termino
Tpo=8:                                         Esperando que T5 termine
Tpo=9:                                         T5 devuelve recurso
Tpo=9:                                         T5 termino

Test de robustez
----------------


Toma un poco mas de 10 segundos
t1 t2 t3 ... significa que ese thread comenzo a trabajar

t6 t7 t8 t9 t10 t11 t12 t13 
Numero de entradas/salidas = 7961978
En mi computador make run reporto unas 10 mil entradas/salidas con 3 threads

Felicitaciones: funciona
Info: Number of cores = 1
Info: total context changes = 40
Info: Implicit context changes = 0
--------------------------------------------
./pedir.bin -ncores 4
Info: setting 4-core FCFS scheduling
El ejemplo del enunciado
------------------------

Tpo=0: T1 (thread 1) invoca nPedir(0)
Tpo=0: T1 cat 0 obtiene recurso
Tpo=1:                     T3 (thread 2) invoca nPedir(0)
Tpo=2:           T2 (thread 3) invoca nPedir(1)
Tpo=3:                                         T5 (thread 4) invoca nPedir(0)
Tpo=3: Esperando que T1 termine
Tpo=4: T1 devuelve recurso
Tpo=4:           T2 cat 1 obtiene recurso
Tpo=4: T1 termino
Tpo=5:                               T4 (thread 5) invoca nPedir(1)
Tpo=6:           T2 devuelve recurso
Tpo=6:                     T3 cat 0 obtiene recurso
Tpo=6:           Esperando que T2 termine
Tpo=6:           T2 termino
Tpo=6:                     Esperando que T3 termine
Tpo=7:                     T3 devuelve recurso
Tpo=7:                               T4 cat 1 obtiene recurso
Tpo=7:                     T3 termino
Tpo=7:                               Esperando que T4 termine
Tpo=8:                               T4 devuelve recurso
Tpo=8:                                         T5 cat 0 obtiene recurso
Tpo=8:                               T4 termino
Tpo=8:                                         Esperando que T5 termine
Tpo=9:                                         T5 devuelve recurso
Tpo=9:                                         T5 termino

Test de robustez
----------------


Toma un poco mas de 10 segundos
t1 t2 t3 ... significa que ese thread comenzo a trabajar

t6 t7 t8 t9 t10 t11 t12 t13 
Numero de entradas/salidas = 1200718
En mi computador make run reporto unas 10 mil entradas/salidas con 3 threads

Felicitaciones: funciona
Info: Number of cores = 4
Info: total context changes = 857680
Info: Implicit context changes = 0
--------------------------------------------
./pedir.bin -slice 1 -ncores 4
Info: setting 4-core round robin scheduling
El ejemplo del enunciado
------------------------

Tpo=0: T1 (thread 1) invoca nPedir(0)
Tpo=0: T1 cat 0 obtiene recurso
Tpo=1:                     T3 (thread 2) invoca nPedir(0)
Tpo=2:           T2 (thread 3) invoca nPedir(1)
Tpo=3:                                         T5 (thread 4) invoca nPedir(0)
Tpo=3: Esperando que T1 termine
Tpo=4: T1 devuelve recurso
Tpo=4:           T2 cat 1 obtiene recurso
Tpo=4: T1 termino
Tpo=5:                               T4 (thread 5) invoca nPedir(1)
Tpo=6:           T2 devuelve recurso
Tpo=6:                     T3 cat 0 obtiene recurso
Tpo=6:           Esperando que T2 termine
Tpo=6:           T2 termino
Tpo=6:                     Esperando que T3 termine
Tpo=7:                     T3 devuelve recurso
Tpo=7:                               T4 cat 1 obtiene recurso
Tpo=7:                     T3 termino
Tpo=7:                               Esperando que T4 termine
Tpo=8:                               T4 devuelve recurso
Tpo=8:                                         T5 cat 0 obtiene recurso
Tpo=8:                               T4 termino
Tpo=8:                                         Esperando que T5 termine
Tpo=9:                                         T5 devuelve recurso
Tpo=9:                                         T5 termino

Test de robustez
----------------


Toma un poco mas de 10 segundos
t1 t2 t3 ... significa que ese thread comenzo a trabajar

t6 t7 t8 t9 t11 t10 t13 t12 
Numero de entradas/salidas = 953228
En mi computador make run reporto unas 10 mil entradas/salidas con 3 threads

Felicitaciones: funciona
Info: Number of cores = 4
Info: total context changes = 680961
Info: Implicit context changes = 1
